#!/usr/bin/env python

# note: this script *must* not have other deps than docker-compose and
# standard packages, this allow us to use it everywhere without trouble.

import argparse
import datetime
import logging
import os
import tempfile
import shutil
import subprocess
import sys
import yaml

from compose.cli import main as command

log = logging.getLogger(__name__)


class PackageLevelCommand(command.TopLevelCommand):
    """I package a Pathwar level.

    Usage:
      package-level [options] [COMMAND] [ARGS...]
      package-level -h|--help

    Options:
      --version         Print version and exit

    Commands:
      build            Build a package for the level

    """
    def __init__(self):
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        prefix = '{0}-'.format(today)
        self.tmpdir = tempfile.mkdtemp(prefix=prefix)
        self.target = 'package-{0}.tar'.format(os.path.basename(os.getcwd()))

    def build(self, project, options):
        """
        Build or rebuild a Pathwar package.

        Usage: build
        """
        print('[+] building containers')
        containers = self.build_containers(project)
        print('[+] exporting containers')
        for container in containers:
            self.export_container(project.client, container)
        print('[+] preparing production docker-compose.yml')
        self.prepare_compose(project)
        print('[+] creating tarball')
        self.create_tarball()

    def build_containers(self, project):
        res = []
        for service in project.get_services():
            if 'build' in service.options:
                name = 'pathwar-exportme-{}'.format(service.name)
                res.append((service.create_container(name=name), service.name))
        return res

    def export_container(self, client, pair):
        container, service_name = pair
        dst = '{0}/{1}.tar'.format(self.tmpdir, service_name)
        rsp = client.export(container.id)
        with open(dst, 'w+') as output:
            for block in rsp.stream():
                output.write(block)

    def prepare_compose(self, project):
        with open('docker-compose.yml') as fh:
            origin = yaml.safe_load(fh)
            output = dict()
            for name, conf in origin.iteritems():
                if 'build' in conf:
                    del conf['build']
                    conf['image'] = 'image-for-{0}'.format(name)
                    conf['entrypoint'] = '/pathwar/scripts/init'
                output[name] = conf
            with open('{0}/docker-compose.yml'.format(self.tmpdir), 'w+') as r:
                r.write(yaml.dump(output))

    def create_tarball(self):
        subprocess.call('tar -zcf {0} -C {1} . 2>/dev/null'.format(self.target, self.tmpdir), shell=True)
        print('Pathwar package is {0}'.format(self.target))
        shutil.rmtree(self.tmpdir)


def main():
    try:
        command = PackageLevelCommand()
        command.sys_dispatch()
    except KeyboardInterrupt:
        log.error("\nAborting.")
        sys.exit(1)
    
if __name__ == '__main__':
    main()
